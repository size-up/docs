# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI/CD and release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  APPLICATION_NAME: "docs"

jobs:
  build:
    name: ‚öôÔ∏è Build application

    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
      - name: üåê Use Node.js LTS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: üóÇ Cache "node_modules"
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: "**/node_modules"
          key: ${{ runner.arch }}-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.arch }}-${{ runner.os }}-yarn-

      - name: üì¶ Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: ‚öôÔ∏è Build application
        run: yarn run build

      - if: steps.yarn-cache.outputs.cache-hit != 'true'
        name: üóÉ List the state of node modules
        continue-on-error: true
        run: yarn list

  release:
    name: üîñ Release application

    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          # used by semantic-release to bypass the branch protection rules
          token: ${{ secrets.GH_TOKEN }}

      - name: üåê Use Node.js LTS
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: üóÇ Cache "node_modules"
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: "**/node_modules"
          key: ${{ runner.arch }}-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.arch }}-${{ runner.os }}-yarn-

      - name: üîñ Release application
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # optional, needed to publish packages on npm
        id: version # save the version to use in an other step/job
    outputs:
      version: ${{ steps.version.outputs.nextVersion }}

  push:
    name: üê≥ Build and push image

    runs-on: ubuntu-latest

    needs: release

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3

      - name: üå≥ Extract branch name
        shell: bash
        run: |
          echo Branch name: ${{ github.head_ref }}
          branch_name=${{ github.head_ref }} && branch_name_sanitized=${branch_name//\//-} 
          echo Sanitized branch name: $branch_name_sanitized
          echo branch_name=$branch_name_sanitized >> $GITHUB_OUTPUT
        id: branch_name

      - name: ‚öôÔ∏è Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: üõ† Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: üì≤ Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üê≥ Build and push image [${{ steps.branch_name.outputs.branch_name }}]
        uses: docker/build-push-action@v3
        with:
          context: . # https://github.com/marketplace/actions/build-and-push-docker-images#git-context
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APPLICATION_NAME }}:${{ steps.branch_name.outputs.branch_name }}

      - name: üê≥ Build and push image ${{ needs.release.outputs.version }}
        uses: docker/build-push-action@v3
        if: ${{ needs.release.outputs.version }} # deploy only if there is a new published version
        with:
          context: . # https://github.com/marketplace/actions/build-and-push-docker-images#git-context
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APPLICATION_NAME }}:${{ needs.release.outputs.version }}

    outputs:
      branch_name: ${{ steps.branch_name.outputs.branch_name }}

  deploy-prep:
    name: üöÄ Deploy prep. [${{ needs.push.outputs.branch_name }}]

    runs-on: ubuntu-latest

    needs: push

    environment:
      name: pre-production # refer to https://github.com/size-up/docs/settings/environments
      url: https://prep.docs.sizeup.cloud

    steps:
      - name: üöÄ Set image [${{ needs.push.outputs.branch_name }}] to pre-production
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.OCI_KUBE_CONFIG }}
        with:
          args: set image -n ${{ env.APPLICATION_NAME }} deployment/${{ env.APPLICATION_NAME }}-prep ${{ env.APPLICATION_NAME }}-prep=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APPLICATION_NAME }}:${{ needs.push.outputs.branch_name }}

      - name: üöÄ Rollout pre-production
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.OCI_KUBE_CONFIG }}
        with:
          args: rollout -n ${{ env.APPLICATION_NAME }} restart deployment ${{ env.APPLICATION_NAME }}-prep

  deploy-prod:
    name: üöÄ Deploy prod. v${{ needs.release.outputs.version }}

    runs-on: ubuntu-latest

    needs: [release, push]

    if: ${{ needs.release.outputs.version }} # deploy only if there is a new published version

    environment:
      name: production # refer to https://github.com/size-up/docs/settings/environments
      url: https://docs.sizeup.cloud

    steps:
      - name: üöÄ Deploy to production v${{ needs.release.outputs.version }}
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.OCI_KUBE_CONFIG }}
        with:
          args: set image -n ${{ env.APPLICATION_NAME }} deployment/${{ env.APPLICATION_NAME }}-prod ${{ env.APPLICATION_NAME }}-prod=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APPLICATION_NAME }}:${{ needs.release.outputs.version }}
